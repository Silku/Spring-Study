<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	1.xml
		ClassPathXmlApplicationContext("Bean파일경로");
		FileSystemXmlApplicationContext("실질적인 파일의 경로");
	2.Annotation
		AnnotationConfigApplicationContext(클래스명.Class);
		
		어노테이션을 활용해서 DI하는 방법
		xml파일에 추가하여야하는 소스코드
		<context:annotation-config/>
		@Autowired
			- 속성 [@autowired(required = false)] 주일될 빈이 없을 경우에 Null로 자동처리
		@Qualifier("bean의 이름")
		
		
		<context:component-scan base-package="패키지 범위, 패키지범위2">
		@Component
		xml의 id와 동일한 방식 -> @Component("인스턴스명")
		
		@value("값")
		private String name;
		 
		@Component - @Controller(model,view 합쳐주는역할. (결과적으로는 viewResolver에서 처리함)) 
													 - @RequestMapping
													 - @GetMapping
													 - @....
				   - @Service	(model의 정규화)
				   - @Repository(DAO, DTO, MGR)
				   기본적으로 각각 어떤기능을 주로 담당하냐에 따라서 컨트롤러,서비스,리포지토리 어노테이션을 써준다.
				   기능이 애매하면 컴포넌트
				   ex) 리포지토리는 데이터와 연결이 되는 기능을 담당하는 부분에 써줌 	 
		
		xml 파일 -> class파일로 대체하는 방법
		@ComponentScan("com.spring.mvc.context", "com.spring.mvc.DAO")
		@Configuration
		Public class 클래스명{
			@Bean
			public DiconnectionEx diconnectionEx(){	-> 메소드 명이 인스턴스 명이다.
				return new DiconnectionEx();
			}
		}

 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	
	<context:component-scan base-package="com.spring.mvc.context"></context:component-scan>
	
	<!-- <context:annotation-config/>  
	component-scan을 사용할시 어노테이션 컨피그는 자동적용 되어있다. 
	따라서 지워줘도 상관없음.
	-->
	<!--  
	<bean id="diex" class="com.spring.mvc.context.DiEx1">


		<property name="name" value ="김태우"></property>
		<property name="phone" value ="010-9934-8799"></property>

	</bean>
	
	<bean id="diex2" class="com.spring.mvc.context.DiEx2">
	
		<property name="name" value ="김태우"></property>
		<property name="number" value ="123456-1234567"></property>
		
	</bean>

	<bean id = "diConnectionEx" class="com.spring.mvc.context.DiConnectionEx">
	
		 <property name = "diex" ref="diex2"></property>
	</bean>
	
		-->
</beans>
